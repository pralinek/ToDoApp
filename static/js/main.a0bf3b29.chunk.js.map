{"version":3,"sources":["components/AddTask.js","components/Todo.js","App.js","index.js"],"names":["AddTask","addTask","useState","taskName","setTaskName","style","paddingTop","display","onSubmit","e","preventDefault","type","value","required","onChange","target","Todo","taskList","setTaskList","useEffect","fetch","then","request","json","apilist","array","random","Math","round","slice","map","obj","randomcoloricon","color","icon","userId","title","id","completed","className","Date","getTime","task","backgroundColor","onClick","updatedTaskList","handleComplete","marginLeft","filter","handleDelete","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wSA0BeA,EAvBC,SAAC,GAAc,IAAbC,EAAY,EAAZA,QACd,EAAgCC,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KAQA,OAGQ,cADA,CACA,iBACA,sBAAMC,MAAO,CAACC,WAAY,MAAOC,QAAS,WAC1C,uBAAMC,SAXO,SAACC,GAClBA,EAAEC,iBACFT,EAAQE,GACRC,EAAY,KAQR,UACA,8CACA,uBAAOO,KAAK,OAAOC,MAAOT,EAAUU,UAAQ,EAACC,SAAU,SAACL,GAAKL,EAAYK,EAAEM,OAAOH,UAClF,uBAAOD,KAAK,SAASC,MAAM,oBCmExBI,G,YAjFF,WACT,MAAgCd,mBAAS,IAAzC,mBAAOe,EAAP,KAAiBC,EAAjB,KAIAC,qBAAU,WAENC,MAAM,8CAA8CC,MAAK,SAAAC,GACrD,OAAOA,EAAQC,UAChBF,MAAK,SAAAG,GACJ,IAAIC,EAAQ,GACRC,EAASC,KAAKC,MAAoB,EAAdD,KAAKD,UAE7BA,GAAU,MACRA,IACAA,EAEFD,GADAA,EAAQD,EAAQK,MAAMH,EAAOA,EAAO,KACtBI,KAAI,SAAAC,GACV,IAAIC,EAAkBL,KAAKC,MAAoB,EAAdD,KAAKD,UACrC,MAAO,CAACO,MAAOD,EAAgBE,KAAMF,EAAiBG,OAAQJ,EAAII,OAAOC,MAAOL,EAAIK,MAAOC,GAAIN,EAAIM,GAAIC,UAAWP,EAAIO,cAG/HpB,EAAYO,QAIlB,IAyBF,OAEI,qBAAKc,UAAU,YAAf,SACA,sBAAKA,UAAU,cAAf,WAEC,EACQ,cAAC,EAAD,CAAStC,QA5BN,SAACE,GAEbe,EAAY,CAAC,CAACiB,OAAQR,KAAKC,MAAqB,GAAdD,KAAKD,UAAcW,IAAI,IAAIG,MAAOC,UAAUL,MAAMjC,EAASmC,WAAW,IAA7F,mBAAuGrB,QA2BjHA,EAASa,KAAI,SAACY,GACZ,OAEK,sBAAKH,UAAU,OAAOlC,MAAO,CAACsC,gBAAgB,GAAD,OAAkB,IAAdD,EAAKR,KAAa,UAAyB,IAAdQ,EAAKR,KAAa,UAAyB,IAAdQ,EAAKR,KAAY,UAAyB,IAAdQ,EAAKR,KAAY,UAAyB,IAAdQ,EAAKR,KAAY,UAAyB,IAAdQ,EAAKR,KAAY,UAAyB,IAAdQ,EAAKR,KAAY,UAAW,KAAvP,UACI,8BACI,oBAAGK,UAAyB,IAAdG,EAAKR,KAAa,QAAuB,IAAdQ,EAAKR,KAAa,KAAoB,IAAdQ,EAAKR,KAAY,KAAoB,IAAdQ,EAAKR,KAAY,UAAyB,IAAdQ,EAAKR,KAAY,KAAoB,IAAdQ,EAAKR,KAAY,SAAwB,IAAdQ,EAAKR,KAAY,SAAU,GAAGU,QAAS,YApB1M,SAACP,GACpB,IAAMQ,EAAkB5B,EAASa,KAAI,SAAAC,GAAG,OACpCA,EAAIM,KAAOA,EAAK,CAAEJ,MAAOF,EAAIE,MAAOC,KAAMH,EAAIG,KAAMC,OAAQJ,EAAII,OAAOC,MAAOL,EAAIK,MAAOC,GAAIN,EAAIM,GAAIC,WAAYP,EAAIO,WAAcP,KAEnIb,EAAY2B,GAgBkNC,CAAeJ,EAAKL,KAAtO,UAA6OK,EAAKN,MAAlP,SAEJ,wBAAQ/B,MAAO,CAAC0C,WAAY,OAAQH,QAAS,YA9BxC,SAACP,GAClB,IAAMQ,EAAkB5B,EAAS+B,QAAO,SAACN,GACrC,OAAOA,EAAKL,KAAOA,KAEvBnB,EAAY2B,GA0BkDI,CAAaP,EAAKL,KAApE,oBAJgQK,EAAKL,cCpD1Qa,MATf,WACE,OAEE,qBAAKX,UAAU,MAAf,SACE,cAAC,EAAD,O,MCJNY,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.a0bf3b29.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport './AddTask.css'\r\n\r\nconst AddTask = ({addTask}) =>{\r\n    const [taskName, setTaskName] = useState(\"\")\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        addTask(taskName)\r\n        setTaskName(\"\")\r\n    }\r\n\r\n    return(\r\n            \r\n            //Chrome validate will cause \"Please fill out this field\", this is wanted behaviour. \r\n            <div>\r\n            <span style={{paddingTop: \"1em\", display: \"block\"}}/>\r\n            <form onSubmit={handleSubmit}>\r\n            <label>Add Task:</label>\r\n            <input type=\"text\" value={taskName} required onChange={(e)=>{setTaskName(e.target.value)}}/>\r\n            <input type=\"submit\" value=\"add task\"/>\r\n            </form>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default AddTask;","import React, { useEffect, useState } from 'react';\r\nimport AddTask from './AddTask'\r\nimport Counter from './Counter'\r\nimport './Todo.css'\r\n\r\n\r\nconst Todo = ()=> {\r\n    const [taskList, setTaskList] = useState([])\r\n    \r\n\r\n\r\n    useEffect(()=>{\r\n        \r\n        fetch('https://jsonplaceholder.typicode.com/todos').then(request=>{\r\n            return request.json()\r\n        }).then(apilist=>{\r\n            let array = ''\r\n            let random = Math.round(Math.random()*9)\r\n            \r\n            random += \"0\"\r\n            ++random\r\n            --random\r\n            array = apilist.slice(random,random+10)\r\n            array = array.map(obj => \r\n                 {  let randomcoloricon = Math.round(Math.random()*6)\r\n                     return {color: randomcoloricon,icon: randomcoloricon, userId: obj.userId,title: obj.title, id: obj.id, completed: obj.completed}} \r\n            )  \r\n            \r\n            setTaskList(array)\r\n            \r\n            \r\n        })\r\n    },[])\r\n    \r\n\r\n    const addTask = (taskName) =>{\r\n        \r\n        setTaskList([{userId: Math.round((Math.random()*10)),id: new Date().getTime(),title:taskName,completed: false},...taskList])\r\n           //tasklist.length is bad idea for key value, maybe miliseconds.    \r\n    }\r\n\r\n    const handleDelete = (id) =>{\r\n        const updatedTaskList = taskList.filter((task)=>{\r\n            return task.id !== id\r\n        })\r\n        setTaskList(updatedTaskList)\r\n        \r\n    }\r\n    \r\n    const handleComplete = (id) =>{\r\n        const updatedTaskList = taskList.map(obj => \r\n            obj.id === id ? { color: obj.color, icon: obj.icon, userId: obj.userId,title: obj.title, id: obj.id, completed: !obj.completed } : obj)\r\n            \r\n            setTaskList(updatedTaskList)\r\n        \r\n    }\r\n\r\n    return(\r\n        \r\n        <div className=\"container\">\r\n        <div className=\"transparent\">\r\n        \r\n        {false && <Counter counterChange = {taskList.length} />}\r\n        {true && <AddTask addTask={addTask}/>}\r\n        {taskList.map((task)=>{\r\n           return(\r\n                \r\n                <div className=\"card\" style={{backgroundColor:`${task.icon === 0 ? \"#00A19D\": task.icon === 1 ? \"#FFB344\": task.icon === 2? \"#E05D5D\": task.icon === 3? \"#112031\": task.icon === 4? \"#22577A\": task.icon === 5? \"#C36839\": task.icon === 6? \"#911F27\": \"\"}`}}  key={task.id} >\r\n                    <div>\r\n                        <p className={task.icon === 0 ? \"bebas\": task.icon === 1 ? \"im\": task.icon === 2? \"it\": task.icon === 3? \"lobster\": task.icon === 4? \"pt\": task.icon === 5? \"qahiri\": task.icon === 6? \"roboto\": \"\"}onClick={()=>{handleComplete(task.id)}}>{task.title} </p>\r\n                    </div>\r\n                    <button style={{marginLeft: \"1em\"}} onClick={()=>{handleDelete(task.id)}}>Done</button>\r\n                </div>\r\n            )\r\n        })}\r\n\r\n        </div>\r\n        \r\n        </div>\r\n\r\n        \r\n    \r\n\r\n        \r\n    )\r\n}\r\n\r\nexport default Todo\r\n\r\n","import './App.css';\r\nimport Todo from './components/Todo'\r\n\r\n\r\n\r\n\r\nfunction App() {\r\n  return (\r\n\r\n    <div className=\"App\">\r\n      <Todo />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport '../node_modules/font-awesome/css/font-awesome.min.css'; \r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n"],"sourceRoot":""}